# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '7f2d5c6d-9ea1-4e13-9444-842e07b919d3'
  imageRepository: 'juiceshop'
  containerRegistry: 'acreg2024.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acreg20242082e68b-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: 'SnykScan'
  jobs:
  - job: 'SnykScanJob'
    displayName: 'Snyk Scan'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SnykSecurityScan@1
      inputs:
        serviceConnectionEndpoint: 'f4835c65-42f8-40c8-a803-98d2f51b7eba'
        testType: 'app'
        severityThreshold: 'medium'
        failOnIssues: true
        failOnThreshold: 'critical'
        monitorWhen: 'always'
    - task: SnykSecurityScan@1
      inputs:
        serviceConnectionEndpoint: 'f4835c65-42f8-40c8-a803-98d2f51b7eba'
        testType: 'code'
        codeSeverityThreshold: 'medium'
        failOnThreshold: 'high'
        failOnIssues: true

- stage: 'Build'
  displayName: 'Build stage'
  jobs:
  - job: 'Build'
    displayName: 'Build'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Build and push an image to container registry'
      inputs:
        command: 'buildAndPush'
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: PublishPipelineArtifact@1
      displayName: 'Publish manifests artifact'
      inputs:
        targetPath: '$(Pipeline.Workspace)/manifests'
        artifact: 'manifests'

- stage: 'Deploy'
  displayName: 'Deploy stage'
  dependsOn: 'Build'

  jobs:
  - deployment: 'Deploy'
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: 'Deploy'
    pool:
      vmImage: $(vmImageName)
    environment: 'mile9299juiceshopv21-1050.apps'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Create imagePullSecret'
            inputs:
              action: 'createSecret'
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: 'Deploy to Kubernetes cluster'
            inputs:
              action: 'deploy'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: 'DeployPullRequest'
    displayName: 'Deploy Pull request'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)

    environment: 'mile9299juiceshopv21-1050.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: 'apps'

          - task: Kubernetes@1
            displayName: 'Create a new namespace for the pull request'
            inputs:
              command: 'apply'
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: 'Create imagePullSecret'
            inputs:
              action: 'createSecret'
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: 'Deploy to the new namespace in the Kubernetes cluster'
            inputs:
              action: 'deploy'
              namespace: $(k8sNamespaceForPR)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: 'get'
            displayName: 'Get services in the new namespace'
            continueOnError: true
            inputs:
              command: 'get'
              namespace: $(k8sNamespaceForPR)
              arguments: 'svc'
              outputFormat: 'jsonpath=http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

          # Getting the IP of the deployed service and writing it to a variable for posing comment
          - script: |
              url="$(get.KubectlOutput)"
              message="Your review app has been deployed"
              if [ ! -z "$url" -a "$url" != "http://:" ]
              then
                message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
              fi
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
