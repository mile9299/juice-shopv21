trigger:
  branches:
    include:
    - "*"

pool:
  vmImage: ubuntu-latest

variables:
  - group: "Pipeline_Scanning_Variables" # specific to Azure DevOps
  - name: JUICE_SHOP_REPO
    value: 'https://github.com/mile9299/juice-shopv21.git'
  - name: DOCKER_PORT
    value: '3000' # Default Docker port
  - name: CS_IMAGE_NAME
    value: 'mile/cs-fcs'
  - name: CS_IMAGE_TAG
    value: '0.42.0'
  - name: CS_USERNAME
    value: 'mile'
  - name: FALCON_REGION
    value: 'us-1'
  - name: PROJECT_PATH
    value: 'git::https://github.com/hashicorp/terraform-guides.git'

stages:
- stage: Build
  jobs:
  - job: BuildAndTest
    steps:
    - checkout: self
      
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '18.0.0'
        
    - task: Bash@3
      displayName: 'Checkout Juice Shop Repo'
      inputs:
        targetType: 'inline'
        script: |
          git clone $(JUICE_SHOP_REPO) juice-shop
          cd juice-shop
          
    - task: Bash@3
      displayName: 'Falcon Cloud Security IaC Scan'
      inputs:
        targetType: 'inline'
        script: |
          set +x
          # check if required env vars are set in the build set up
          
          scan_status=0
          if [[ -z "$(CS_USERNAME)" || -z "$(CS_PASSWORD)" || -z "$(CS_REGISTRY)" || -z "$(CS_IMAGE_NAME)" || -z "$(CS_IMAGE_TAG)" || -z "$(FALCON_CLIENT_ID)" || -z "$(FALCON_CLIENT_SECRET)" || -z "$(FALCON_REGION)" || -z "$(PROJECT_PATH)" ]]; then
              echo "Error: required environment variables/params are not set"
              exit 1
          else  
              # login to crowdstrike registry
              echo "Logging in to crowdstrike registry with username: $(CS_USERNAME)"
              echo "$(CS_PASSWORD)" | docker login --username "$(CS_USERNAME)" --password-stdin
              
              if [ $? -eq 0 ]; then
                  echo "Docker login successful"
                  #  pull the fcs container target
                  echo "Pulling fcs container target from crowdstrike"
                  docker pull $(CS_IMAGE_NAME):$(CS_IMAGE_TAG)
                  if [ $? -eq 0 ]; then
                      echo "fcs docker container image pulled successfully"
                      echo "=============== FCS IaC Scan Starts ==============="
                      docker run --network=host --rm "$(CS_IMAGE_NAME)":"$(CS_IMAGE_TAG)" --client-id "$(FALCON_CLIENT_ID)" --client-secret "$(FALCON_CLIENT_SECRET)" --falcon-region "$(FALCON_REGION)" iac scan -p "$(PROJECT_PATH)" --fail-on "high=10,medium=70,low=50,info=10" | tee scansummary.txt
                      echo "=============== FCS IaC Scan Ends ==============="
                      echo "fcs-iac-scan-status: $scan_status"
                      if [ $scan_status -eq 40 ]; then
                          echo "Scan succeeded & vulnerabilities count are ABOVE the '--fail-on' threshold; Pipeline will be marked as Success, but this stage will be marked as Unstable"
                          exit 0
                      elif [ $scan_status -eq 0 ]; then
                          echo "Scan succeeded & vulnerabilities count are BELOW the '--fail-on' threshold; Pipeline will be marked as Success"
                          exit 0
                      else
                          echo "Unexpected scan exit code: $scan_status"
                          exit 1
                      fi
                  else
                      echo "Error: failed to pull fcs docker image from crowdstrike"
                      exit 1
                  fi
              else
                  echo "Error: docker login failed"
                  exit 1
              fi
          fi

    - task: Bash@3
      displayName: 'Process SARIF file'
      inputs:
        targetType: 'inline'
        script: |
          # Check if scansummary.txt exists
          if [ -f "$(Build.SourcesDirectory)/scansummary.txt" ]; then
            # Try to extract SARIF file path
            SARIFFILE=$(grep -o 'Results saved to file: [^ ]*' $(Build.SourcesDirectory)/scansummary.txt | sed 's/Results saved to file: //')
            
            # If SARIF file path was found and file exists
            if [ -n "$SARIFFILE" ] && [ -f "$SARIFFILE" ]; then
              echo "Found SARIF file: $SARIFFILE"
              jq '.runs[].tool.driver.informationUri = "https://www.crowdstrike.com"' $SARIFFILE > $(Build.SourcesDirectory)/results.sarif
              echo "Successfully processed SARIF file to results.sarif"
            else
              # Create an empty valid SARIF file
              echo "SARIF file not found in scan output, creating a minimal valid SARIF file"
              echo '{
                "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                "version": "2.1.0",
                "runs": [
                  {
                    "tool": {
                      "driver": {
                        "name": "CrowdStrike Falcon",
                        "informationUri": "https://www.crowdstrike.com",
                        "rules": []
                      }
                    },
                    "results": []
                  }
                ]
              }' > $(Build.SourcesDirectory)/results.sarif
            fi
          else
            echo "Scan summary file not found, creating a minimal valid SARIF file"
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "CrowdStrike Falcon",
                      "informationUri": "https://www.crowdstrike.com",
                      "rules": []
                    }
                  },
                  "results": []
                }
              ]
            }' > $(Build.SourcesDirectory)/results.sarif
          fi
      continueOnError: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish SARIF results'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/results.sarif'
        artifactName: 'CodeAnalysisLogs'
        publishLocation: 'Container'
      continueOnError: true

    - task: Bash@3
      displayName: 'Return IAC Scan Summary'
      inputs:
        targetType: 'inline'
        script: |
          if [ -f "$(Build.SourcesDirectory)/scansummary.txt" ]; then
            cat "$(Build.SourcesDirectory)/scansummary.txt"
          else
            echo "Scan summary file not found"
          fi
      continueOnError: true

    - task: Bash@3
      displayName: 'Return IAC Sarif Results'
      inputs:
        targetType: 'inline'
        script: |
          if [ -f "$(Build.SourcesDirectory)/results.sarif" ]; then
            cat "$(Build.SourcesDirectory)/results.sarif"
          else
            echo "SARIF file not found"
          fi
      continueOnError: true

    - task: Docker@2
      displayName: 'Build container image using Docker'
      inputs:
        repository: $(CONTAINER_REPO)
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: $(CONTAINER_TAG)
      continueOnError: true

    - task: Bash@3
      displayName: 'Scan container image with CrowdStrike Container Image Scan'
      inputs:
        targetType: 'inline'
        script: |
          export FALCON_CLIENT_SECRET=$(FALCON_CLIENT_SECRET)
          export FALCON_CLIENT_ID=$(FALCON_CLIENT_ID)
          pip3 install docker crowdstrike-falconpy
          pip install retry
          if [ ! -d container-image-scan ] ; then
            git clone https://github.com/crowdstrike/container-image-scan
          fi
          
          # Run the scan but don't fail on non-zero exit
          python3 container-image-scan/cs_scanimage.py --json-report $(Build.SourcesDirectory)/report.json || true
          
          # Process the report
          if [ -f "$(Build.SourcesDirectory)/report.json" ]; then
            # Create remediation plan in the working directory
            echo "# Vulnerability Remediation Plan" > $(Build.SourcesDirectory)/remediation_plan.md
            
            # Check for vulnerabilities
            if jq -e '.vulnerabilities' $(Build.SourcesDirectory)/report.json > /dev/null 2>&1; then
              echo "Vulnerabilities found in the image:"
              jq -r '.vulnerabilities[] | select(.severity == "HIGH" or .severity == "CRITICAL") | "- \(.severity): \(.cve_id) in \(.package_name) \(.package_version)"' $(Build.SourcesDirectory)/report.json
              
              echo "## High and Critical Vulnerabilities" >> $(Build.SourcesDirectory)/remediation_plan.md
              jq -r '.vulnerabilities[] | select(.severity == "HIGH" or .severity == "CRITICAL") | "- **\(.severity)**: \(.cve_id) in \(.package_name) \(.package_version)\n  - Description: \(.description)\n  - Remediation: Update to latest version or apply patch"' $(Build.SourcesDirectory)/report.json >> $(Build.SourcesDirectory)/remediation_plan.md
            fi
            
            # Check for secrets
            if jq -e '.secrets' $(Build.SourcesDirectory)/report.json > /dev/null 2>&1; then
              echo "WARNING: Secrets were detected in the image:"
              jq -r '.secrets[] | "- Secret type: \(.type) in \(.path)"' $(Build.SourcesDirectory)/report.json
              
              echo "## Detected Secrets" >> $(Build.SourcesDirectory)/remediation_plan.md
              jq -r '.secrets[] | "- Secret type: \(.type) found in \(.path)\n  - Action: Remove this secret and use secure storage methods instead"' $(Build.SourcesDirectory)/report.json >> $(Build.SourcesDirectory)/remediation_plan.md
              
              echo "##vso[task.setvariable variable=SECRETS_FOUND]true"
            else
              echo "No secrets were detected in the image."
            fi
          else
            echo "Error: Scan report not generated."
            echo "# No security findings to report" > $(Build.SourcesDirectory)/remediation_plan.md
          fi
      continueOnError: true

    - task: Bash@3
      displayName: 'Verify Remediation Plan'
      inputs:
        targetType: 'inline'
        script: |
          if [ -f "$(Build.SourcesDirectory)/remediation_plan.md" ]; then
            echo "Remediation plan file exists"
          else
            echo "Creating empty remediation plan"
            echo "# No security findings to report" > $(Build.SourcesDirectory)/remediation_plan.md
          fi
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Remediation Plan'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/remediation_plan.md'
        artifactName: 'SecurityRemediationPlan'
        publishLocation: 'Container'
      continueOnError: true

    - task: Bash@3
      displayName: 'Print CrowdStrike Full Image Scan Report'
      inputs:
        targetType: 'inline'
        script: |
          if [ -f "$(Build.SourcesDirectory)/report.json" ]; then
            jq '.' $(Build.SourcesDirectory)/report.json
          else
            echo "Image scan report not found"
          fi
      continueOnError: true

    - task: Bash@3
      displayName: 'Tag container image'
      inputs:
        targetType: 'inline'
        script: |
          if [ -n "$(CONTAINER_REPO)" ] && [ -n "$(azureContainerRegistry)" ]; then
            docker tag $(CONTAINER_REPO) $(azureContainerRegistry)/$(CONTAINER_REPO)
            echo "Container image tagged successfully"
          else
            echo "Missing container repository or registry information"
          fi
      continueOnError: true

    - task: Bash@3
      name: policy
      displayName: 'Return API response from CrowdStrike Image Assessment'
      inputs:
        targetType: 'inline'
        script: |
          export FALCON_CLIENT_SECRET=$(FALCON_CLIENT_SECRET)
          export FALCON_CLIENT_ID=$(FALCON_CLIENT_ID)
          export API_BASE_URL=$(API_BASE_URL)
          export YOUR_CLOUD=$(YOUR_CLOUD)
          
          if [ -z "$FALCON_CLIENT_SECRET" ] || [ -z "$FALCON_CLIENT_ID" ] || [ -z "$API_BASE_URL" ] || [ -z "$YOUR_CLOUD" ]; then
            echo "Missing required environment variables for API call"
            echo "##vso[task.setvariable variable=failBuild;isOutput=true]false"
            exit 0
          fi
          
          RESPONSE=$(curl \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
            --request POST \
            --silent ${API_BASE_URL}/oauth2/token) 
          CS_JWT=$(echo ${RESPONSE} | jq -r '.access_token')
          
          if [ -z "$CS_JWT" ] || [ "$CS_JWT" == "null" ]; then
            echo "Failed to extract access token"
            echo "##vso[task.setvariable variable=failBuild;isOutput=true]false"
            exit 0
          fi
          ImageCheck=$(curl -s -X GET -H "authorization: Bearer ${CS_JWT}" \
            "https://container-upload.${YOUR_CLOUD}/policy-checks?policy_type=image-prevention-policy&repository=$CONTAINER_REPO&tag=$(CONTAINER_TAG)")
          
          export test=$(echo $ImageCheck | jq '.resources[0].deny')
          echo "Image assessment result: $test"
          echo "##vso[task.setvariable variable=failBuild;isOutput=true]$test"
      continueOnError: true

    - task: Bash@3
      displayName: 'Build'
      inputs:
        targetType: 'inline'
        script: |
          npm cache clean -f
          npm install
          # Start the application in the background using nohup
          nohup npm start > /dev/null 2>&1 &
          sleep 5
      continueOnError: true

    - task: Bash@3
      displayName: 'Deploy'
      inputs:
        targetType: 'inline'
        script: |
          docker stop juice-shop || true
          docker rm juice-shop || true
          
          docker build -t juice-shop .
          CONTAINER_ID=$(docker run -d -P --name juice-shop juice-shop)
          
          if [ $? -eq 0 ]; then
            DOCKER_HOST_PORT=$(docker port juice-shop 3000 | cut -d ':' -f 2)
            
            if [ -n "$DOCKER_HOST_PORT" ]; then
              echo "Juice Shop is running on http://localhost:$DOCKER_HOST_PORT"
              echo "##vso[task.setvariable variable=DOCKER_HOST_PORT;isOutput=true]$DOCKER_HOST_PORT"
            else
              echo "Failed to get container port mapping"
            fi
          else
            echo "Failed to start container"
          fi
      continueOnError: true

- stage: PostDeployment
  dependsOn: Build
  jobs:
  - job: Notify
    steps:
    - script: echo 'Build, test, and deployment successful!'
      displayName: 'Success Notification'
    
    - task: Bash@3
      displayName: 'Security Findings Summary'
      inputs:
        targetType: 'inline'
        script: |
          echo "## Security Scan Summary"
          echo ""
          echo "### Container Image Scan"
          
          if [ -f "$(Pipeline.Workspace)/SecurityRemediationPlan/remediation_plan.md" ]; then
            cat "$(Pipeline.Workspace)/SecurityRemediationPlan/remediation_plan.md"
          else
            echo "No remediation plan found. Container scan may have completed without findings."
          fi
          
          echo ""
          echo "### Next Steps"
          echo "1. Review the security findings in the remediation plan"
          echo "2. Address high and critical vulnerabilities"
          echo "3. Remove any detected secrets from container images"
          echo "4. Re-scan after remediation to verify fixes"
      continueOnError: true
